@page "/searchproducts"

@using BlazorWebAssembly3.ClassLibrary
@inject HttpClient _httpClient

<style>
    table.table tbody tr td img {
        width: 100px;
    }
</style>

<h1>Search Products</h1>

<p>This component demonstrates performing a search against a database.</p>

<input placeholder="Search Term" @bind="_searchTerm" />
<button @onclick="Search">Search Products</button>

@if (_productCategories == null)
{
    <p><em>No matching products ...</em></p>
}
else
{
    <p>Products matching @_searchTerm</p>
    <table class="table">
        <thead>
            <tr>
                <th>Product Id</th>
                <th>Name</th>
                <th>Category Name</th>
                <th>Price</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productCategory in _productCategories)
            {
                <tr>
                    <td>@productCategory.ProductId</td>
                    <td>@productCategory.Name</td>
                    <td>@productCategory.CategoryName</td>
                    <td>Â£@($"{productCategory.Price:0.00}")</td>
                    <td><img src="@productCategory.ImageFilePath" alt="@productCategory.Name image" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
#pragma warning disable 649
    private string _searchTerm;
#pragma warning restore 649

    private ProductCategory[] _productCategories;

    protected async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(_searchTerm) && _searchTerm.Length >= 3)
        {
            var uri = new Uri("http://localhost:62494/ProductCategory/SearchProductsAsync?searchTerm=" + _searchTerm);
            _productCategories = await _httpClient.GetFromJsonAsync<ProductCategory[]>(uri);
        }
    }
}
